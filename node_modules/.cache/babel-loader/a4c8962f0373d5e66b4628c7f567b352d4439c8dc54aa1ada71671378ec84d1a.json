{"ast":null,"code":"import isFunction from './is-function';\nfunction flru(max) {\n  var num, curr, prev;\n  var limit = max || 1;\n  function keep(key, value) {\n    if (++num > limit) {\n      prev = curr;\n      reset(1);\n      ++num;\n    }\n    curr[key] = value;\n  }\n  function reset(isPartial) {\n    num = 0;\n    curr = Object.create(null);\n    isPartial || (prev = Object.create(null));\n  }\n  reset();\n  return {\n    clear: reset,\n    has: function (key) {\n      return curr[key] !== void 0 || prev[key] !== void 0;\n    },\n    get: function (key) {\n      var val = curr[key];\n      if (val !== void 0) return val;\n      if ((val = prev[key]) !== void 0) {\n        keep(key, val);\n        return val;\n      }\n    },\n    set: function (key, value) {\n      if (curr[key] !== void 0) {\n        curr[key] = value;\n      } else {\n        keep(key, value);\n      }\n    }\n  };\n}\n/**\n * _.memoize(calColor);\n * _.memoize(calColor, (...args) => args[0]);\n * @param f\n * @param resolver\n * @param maxSize lru maxSize\n */\nexport default (function (f, resolver, maxSize) {\n  if (maxSize === void 0) {\n    maxSize = 128;\n  }\n  if (!isFunction(f)) {\n    throw new TypeError('Expected a function');\n  }\n  var memoized = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    // 使用方法构造 key，如果不存在 resolver，则直接取第一个参数作为 key\n    var key = resolver ? resolver.apply(this, args) : args[0];\n    var cache = memoized.cache;\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = f.apply(this, args);\n    // 缓存起来\n    cache.set(key, result);\n    return result;\n  };\n  memoized.cache = flru(maxSize);\n  return memoized;\n});","map":{"version":3,"names":["isFunction","flru","max","num","curr","prev","limit","keep","key","value","reset","isPartial","Object","create","clear","has","get","val","set","f","resolver","maxSize","TypeError","memoized","args","_i","arguments","length","apply","cache","result"],"sources":["lodash/memoize.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,UAAU,MAAM,eAAe;AAEtC,SAASC,IAAIA,CAACC,GAAW;EACvB,IAAIC,GAAG,EAAEC,IAAI,EAAEC,IAAI;EACnB,IAAMC,KAAK,GAAGJ,GAAG,IAAI,CAAC;EAEtB,SAASK,IAAIA,CAACC,GAAG,EAAEC,KAAK;IACtB,IAAI,EAAEN,GAAG,GAAGG,KAAK,EAAE;MACjBD,IAAI,GAAGD,IAAI;MACXM,KAAK,CAAC,CAAC,CAAC;MACR,EAAEP,GAAG;;IAEPC,IAAI,CAACI,GAAG,CAAC,GAAGC,KAAK;EACnB;EAEA,SAASC,KAAKA,CAACC,SAAkB;IAC/BR,GAAG,GAAG,CAAC;IACPC,IAAI,GAAGQ,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC1BF,SAAS,KAAKN,IAAI,GAAGO,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;EAC3C;EAEAH,KAAK,EAAE;EAEP,OAAO;IACLI,KAAK,EAAEJ,KAAK;IACZK,GAAG,EAAE,SAAAA,CAAUP,GAAG;MAChB,OAAOJ,IAAI,CAACI,GAAG,CAAC,KAAK,KAAK,CAAC,IAAIH,IAAI,CAACG,GAAG,CAAC,KAAK,KAAK,CAAC;IACrD,CAAC;IACDQ,GAAG,EAAE,SAAAA,CAAUR,GAAG;MAChB,IAAIS,GAAG,GAAGb,IAAI,CAACI,GAAG,CAAC;MACnB,IAAIS,GAAG,KAAK,KAAK,CAAC,EAAE,OAAOA,GAAG;MAC9B,IAAI,CAACA,GAAG,GAAGZ,IAAI,CAACG,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;QAChCD,IAAI,CAACC,GAAG,EAAES,GAAG,CAAC;QACd,OAAOA,GAAG;;IAEd,CAAC;IACDC,GAAG,EAAE,SAAAA,CAAUV,GAAG,EAAEC,KAAK;MACvB,IAAIL,IAAI,CAACI,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;QACxBJ,IAAI,CAACI,GAAG,CAAC,GAAGC,KAAK;OAClB,MAAM;QACLF,IAAI,CAACC,GAAG,EAAEC,KAAK,CAAC;;IAEpB;GACD;AACH;AAEA;;;;;;;AAOA,gBAAe,UAACU,CAAW,EAAEC,QAAqC,EAAEC,OAAa;EAAb,IAAAA,OAAA;IAAAA,OAAA,MAAa;EAAA;EAC/E,IAAI,CAACrB,UAAU,CAACmB,CAAC,CAAC,EAAE;IAClB,MAAM,IAAIG,SAAS,CAAC,qBAAqB,CAAC;;EAG5C,IAAMC,QAAQ,GAAG,SAAAA,CAAA;IAAU,IAAAC,IAAA;SAAA,IAAAC,EAAA,IAAO,EAAPA,EAAA,GAAAC,SAAA,CAAAC,MAAO,EAAPF,EAAA,EAAO;MAAPD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACzB;IACA,IAAMjB,GAAG,GAAGY,QAAQ,GAAGA,QAAQ,CAACQ,KAAK,CAAC,IAAI,EAAEJ,IAAI,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;IAC3D,IAAMK,KAAK,GAAGN,QAAQ,CAACM,KAAK;IAE5B,IAAIA,KAAK,CAACd,GAAG,CAACP,GAAG,CAAC,EAAE;MAClB,OAAOqB,KAAK,CAACb,GAAG,CAACR,GAAG,CAAC;;IAEvB,IAAMsB,MAAM,GAAGX,CAAC,CAACS,KAAK,CAAC,IAAI,EAAEJ,IAAI,CAAC;IAClC;IACAK,KAAK,CAACX,GAAG,CAACV,GAAG,EAAEsB,MAAM,CAAC;IACtB,OAAOA,MAAM;EACf,CAAC;EAEDP,QAAQ,CAACM,KAAK,GAAG5B,IAAI,CAACoB,OAAO,CAAC;EAE9B,OAAOE,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}