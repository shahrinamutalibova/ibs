{"ast":null,"code":"export function isTranspose(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  const transposes = transformations.map(([type]) => type).filter(type => type === 'transpose');\n  return transposes.length % 2 !== 0;\n}\nexport function isPolar(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return transformations.some(([type]) => type === 'polar');\n}\nexport function isRadial(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return (\n    // distinguish radial from theta.\n    transformations.some(([type]) => type === 'reflect') && transformations.some(([type]) => type.startsWith('transpose'))\n  );\n}\nexport function isHelix(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return transformations.some(([type]) => type === 'helix');\n}\nexport function isParallel(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return transformations.some(([type]) => type === 'parallel');\n}\nexport function isFisheye(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  return transformations.some(([type]) => type === 'fisheye');\n}\nexport function isRadar(coordinate) {\n  return isParallel(coordinate) && isPolar(coordinate);\n}\nexport function isCircular(coordinate) {\n  return isHelix(coordinate) || isPolar(coordinate);\n}\nexport function isTheta(coordinate) {\n  return isPolar(coordinate) && isTranspose(coordinate);\n}\nexport function isNonCartesian(coordinate) {\n  return isPolar(coordinate) || isParallel(coordinate) || isRadial(coordinate) || isTheta(coordinate);\n}\nexport function getRadius(coordinate) {\n  if (isCircular(coordinate)) {\n    const [width, height] = coordinate.getSize();\n    const polar = coordinate.getOptions().transformations.find(t => t[0] === 'polar');\n    // coordinate.size * outerRadius.\n    if (polar) return Math.max(width, height) / 2 * polar[4];\n  }\n  return 0;\n}\nexport function radiusOf(coordinate) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  const [,,, innerRadius, outerRadius] = transformations.find(d => d[0] === 'polar');\n  return [+innerRadius, +outerRadius];\n}\nexport function angleOf(coordinate, isRadius = true) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  const [, startAngle, endAngle] = transformations.find(d => d[0] === 'polar');\n  return isRadius ? [+startAngle * 180 / Math.PI, +endAngle * 180 / Math.PI] : [startAngle, endAngle];\n}\nexport function getTransformOptions(coordinate, type) {\n  const {\n    transformations\n  } = coordinate.getOptions();\n  const [, ...args] = transformations.find(d => d[0] === type);\n  return args;\n}","map":{"version":3,"names":["isTranspose","coordinate","transformations","getOptions","transposes","map","type","filter","length","isPolar","some","isRadial","startsWith","isHelix","isParallel","isFisheye","isRadar","isCircular","isTheta","isNonCartesian","getRadius","width","height","getSize","polar","find","t","Math","max","radiusOf","innerRadius","outerRadius","d","angleOf","isRadius","startAngle","endAngle","PI","getTransformOptions","args"],"sources":["utils/coordinate.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}