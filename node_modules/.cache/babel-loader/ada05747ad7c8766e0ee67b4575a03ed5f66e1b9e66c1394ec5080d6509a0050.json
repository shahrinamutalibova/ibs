{"ast":null,"code":"import { SPECIAL_OPTIONS, TRANSFORM_OPTION_KEY, CONFIG_SHAPE, VIEW_OPTIONS } from '../constants';\nimport { omit, pick, isArray, deleteExcessKeys, filterTransformed, mergeWithArrayCoverage, set, isObject, isUndefined } from './index';\n/**\n * @title 将自定义配置转换为 G2 接受的格式\n */\nexport var transformOptions = function (params) {\n  var options = filterTransformed(params);\n  var _a = options.children,\n    children = _a === void 0 ? [] : _a;\n  var rest = omit(options, [].concat(VIEW_OPTIONS, CONFIG_SHAPE.map(function (item) {\n    return item.key;\n  })));\n  var getCustomTransform = function (key) {\n    var _a;\n    return (_a = SPECIAL_OPTIONS.find(function (option) {\n      return option.key === key;\n    })) === null || _a === void 0 ? void 0 : _a.callback;\n  };\n  /**\n   * @description 更新图表配置\n   */\n  var updateOptions = function (origin, key, value) {\n    var callback = getCustomTransform(key);\n    if (callback) {\n      callback(origin, key, value);\n    } else {\n      origin[key] = mergeWithArrayCoverage({}, origin[key], value);\n    }\n  };\n  /**\n   * @description\n   *  1. 将 CONFIG_SHAPE 中的配置项, 转换为 children\n   * @example 详见 src/core/constants/index.ts\n   */\n  var transformShape = function (config) {\n    Object.keys(config).forEach(function (key) {\n      var exist = CONFIG_SHAPE.find(function (item) {\n        return item.key === key;\n      });\n      if (exist) {\n        var type = exist.type,\n          extend_keys = exist.extend_keys;\n        if (type) {\n          children.push(transformConfig(mergeWithArrayCoverage({}, pick(config, extend_keys), {\n            type: type\n          }, config[key])));\n        } else {\n          // annotations\n          if (isArray(config[key])) {\n            config[key].forEach(function (annotation) {\n              children.push(transformConfig(annotation));\n            });\n          }\n        }\n      }\n    });\n  };\n  /**\n   * @title 通用转换逻辑\n   * @description 直接修改原对象\n   */\n  var transformConfig = function (config) {\n    transformShape(config);\n    /**\n     * @description 遍历配置项，如果存在对应的映射规则，则进行转换\n     * @example 详见 src/core/constants/index.ts\n     */\n    Object.keys(TRANSFORM_OPTION_KEY).forEach(function (key) {\n      var transformTarget = TRANSFORM_OPTION_KEY[key];\n      if (!isUndefined(config[key])) {\n        if (isObject(transformTarget)) {\n          var value = transformTarget.value,\n            target = transformTarget.target;\n          var transformValue = value(config[key]);\n          updateOptions(config, target, transformValue);\n        } else {\n          set(config, transformTarget, config[key]);\n        }\n      }\n    });\n    return config;\n  };\n  children.forEach(function (child) {\n    /**\n     * 提前先 child 创造一个 config 防止 rest 被污染 和 child 数据缺失\n     * @description 外层配置应用到所有 children\n     */\n    var config = mergeWithArrayCoverage({}, rest, child);\n    transformConfig(mergeWithArrayCoverage(child, config));\n  });\n  transformShape(options);\n  deleteExcessKeys(options);\n  return params;\n};","map":{"version":3,"names":["SPECIAL_OPTIONS","TRANSFORM_OPTION_KEY","CONFIG_SHAPE","VIEW_OPTIONS","omit","pick","isArray","deleteExcessKeys","filterTransformed","mergeWithArrayCoverage","set","isObject","isUndefined","transformOptions","params","options","_a","children","rest","concat","map","item","key","getCustomTransform","find","option","callback","updateOptions","origin","value","transformShape","config","Object","keys","forEach","exist","type","extend_keys","push","transformConfig","annotation","transformTarget","target","transformValue","child"],"sources":["C:/Users/hp/Desktop/ibs/IBS-adminpage/node_modules/@ant-design/plots/es/core/utils/transform.js"],"sourcesContent":["import { SPECIAL_OPTIONS, TRANSFORM_OPTION_KEY, CONFIG_SHAPE, VIEW_OPTIONS } from '../constants';\nimport { omit, pick, isArray, deleteExcessKeys, filterTransformed, mergeWithArrayCoverage, set, isObject, isUndefined, } from './index';\n/**\n * @title 将自定义配置转换为 G2 接受的格式\n */\nexport var transformOptions = function (params) {\n    var options = filterTransformed(params);\n    var _a = options.children, children = _a === void 0 ? [] : _a;\n    var rest = omit(options, [].concat(VIEW_OPTIONS, CONFIG_SHAPE.map(function (item) { return item.key; })));\n    var getCustomTransform = function (key) {\n        var _a;\n        return (_a = SPECIAL_OPTIONS.find(function (option) { return option.key === key; })) === null || _a === void 0 ? void 0 : _a.callback;\n    };\n    /**\n     * @description 更新图表配置\n     */\n    var updateOptions = function (origin, key, value) {\n        var callback = getCustomTransform(key);\n        if (callback) {\n            callback(origin, key, value);\n        }\n        else {\n            origin[key] = mergeWithArrayCoverage({}, origin[key], value);\n        }\n    };\n    /**\n     * @description\n     *  1. 将 CONFIG_SHAPE 中的配置项, 转换为 children\n     * @example 详见 src/core/constants/index.ts\n     */\n    var transformShape = function (config) {\n        Object.keys(config).forEach(function (key) {\n            var exist = CONFIG_SHAPE.find(function (item) { return item.key === key; });\n            if (exist) {\n                var type = exist.type, extend_keys = exist.extend_keys;\n                if (type) {\n                    children.push(transformConfig(mergeWithArrayCoverage({}, pick(config, extend_keys), { type: type }, config[key])));\n                }\n                else {\n                    // annotations\n                    if (isArray(config[key])) {\n                        config[key].forEach(function (annotation) {\n                            children.push(transformConfig(annotation));\n                        });\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * @title 通用转换逻辑\n     * @description 直接修改原对象\n     */\n    var transformConfig = function (config) {\n        transformShape(config);\n        /**\n         * @description 遍历配置项，如果存在对应的映射规则，则进行转换\n         * @example 详见 src/core/constants/index.ts\n         */\n        Object.keys(TRANSFORM_OPTION_KEY).forEach(function (key) {\n            var transformTarget = TRANSFORM_OPTION_KEY[key];\n            if (!isUndefined(config[key])) {\n                if (isObject(transformTarget)) {\n                    var value = transformTarget.value, target = transformTarget.target;\n                    var transformValue = value(config[key]);\n                    updateOptions(config, target, transformValue);\n                }\n                else {\n                    set(config, transformTarget, config[key]);\n                }\n            }\n        });\n        return config;\n    };\n    children.forEach(function (child) {\n        /**\n         * 提前先 child 创造一个 config 防止 rest 被污染 和 child 数据缺失\n         * @description 外层配置应用到所有 children\n         */\n        var config = mergeWithArrayCoverage({}, rest, child);\n        transformConfig(mergeWithArrayCoverage(child, config));\n    });\n    transformShape(options);\n    deleteExcessKeys(options);\n    return params;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}