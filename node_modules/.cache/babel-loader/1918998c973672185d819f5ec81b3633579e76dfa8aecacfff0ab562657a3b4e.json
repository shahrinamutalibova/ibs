{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isAxisHorizontal } from '../guides/line';\nimport { boundTest } from '../utils/test';\nfunction inferTextBaseline(attr) {\n  var type = attr.type,\n    labelDirection = attr.labelDirection;\n  if (type === 'linear' && isAxisHorizontal(attr)) {\n    return labelDirection === 'negative' ? 'bottom' : 'top';\n  }\n  return 'middle';\n}\nexport default function wrapLabels(labels, overlapCfg, attr, utils) {\n  var _a = overlapCfg.wordWrapWidth,\n    wordWrapWidth = _a === void 0 ? 50 : _a,\n    _b = overlapCfg.maxLines,\n    maxLines = _b === void 0 ? 3 : _b,\n    _c = overlapCfg.recoverWhenFailed,\n    recoverWhenFailed = _c === void 0 ? true : _c,\n    _d = overlapCfg.margin,\n    margin = _d === void 0 ? [0, 0, 0, 0] : _d;\n  var defaultLines = labels.map(function (label) {\n    return label.attr('maxLines') || 1;\n  });\n  var minLines = Math.min.apply(Math, __spreadArray([], __read(defaultLines), false));\n  var runAndPassed = function () {\n    return boundTest(labels, attr, margin).length < 1;\n  };\n  var textBaseline = inferTextBaseline(attr);\n  var setLabelsWrap = function (lines) {\n    return labels.forEach(function (label, index) {\n      var maxLines = Array.isArray(lines) ? lines[index] : lines;\n      utils.wrap(label, wordWrapWidth, maxLines, textBaseline);\n    });\n  };\n  if (minLines > maxLines) return;\n  for (var lines = minLines; lines <= maxLines; lines++) {\n    setLabelsWrap(lines);\n    if (runAndPassed()) return;\n  }\n  if (recoverWhenFailed) {\n    setLabelsWrap(defaultLines);\n  }\n}","map":{"version":3,"names":["isAxisHorizontal","boundTest","inferTextBaseline","attr","type","labelDirection","wrapLabels","labels","overlapCfg","utils","_a","wordWrapWidth","_b","maxLines","_c","recoverWhenFailed","_d","margin","defaultLines","map","label","minLines","Math","min","apply","__spreadArray","__read","runAndPassed","length","textBaseline","setLabelsWrap","lines","forEach","index","Array","isArray","wrap"],"sources":["ui/axis/overlap/autoWrap.ts"],"sourcesContent":[null],"mappings":";AACA,SAASA,gBAAgB,QAAQ,gBAAgB;AAEjD,SAASC,SAAS,QAAQ,eAAe;AAQzC,SAASC,iBAAiBA,CAACC,IAAoB;EACrC,IAAAC,IAAI,GAAqBD,IAAI,CAAAC,IAAzB;IAAEC,cAAc,GAAKF,IAAI,CAAAE,cAAT;EAC5B,IAAID,IAAI,KAAK,QAAQ,IAAIJ,gBAAgB,CAACG,IAAsC,CAAC,EAAE;IACjF,OAAOE,cAAc,KAAK,UAAU,GAAG,QAAQ,GAAG,KAAK;EACzD;EACA,OAAO,QAAQ;AACjB;AAEA,eAAc,SAAUC,UAAUA,CAACC,MAAc,EAAEC,UAA0B,EAAEL,IAAoB,EAAEM,KAAY;EACvG,IAAAC,EAAA,GAAsFF,UAAU,CAAAG,aAA9E;IAAlBA,aAAa,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IAAEE,EAAA,GAAkEJ,UAAU,CAAAK,QAAhE;IAAZA,QAAQ,GAAAD,EAAA,cAAG,CAAC,GAAAA,EAAA;IAAEE,EAAA,GAAoDN,UAAU,CAAAO,iBAAtC;IAAxBA,iBAAiB,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAAEE,EAAA,GAA0BR,UAAU,CAAAS,MAAf;IAArBA,MAAM,GAAAD,EAAA,cAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAAA,EAAA;EAEzF,IAAME,YAAY,GAAGX,MAAM,CAACY,GAAG,CAAC,UAACC,KAAK;IAAK,OAAAA,KAAK,CAACjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;EAA3B,CAA2B,CAAC;EAEvE,IAAMkB,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAAC,KAAA,CAARF,IAAI,EAAAG,aAAA,KAAAC,MAAA,CAAQR,YAAY,UAAC;EAE1C,IAAMS,YAAY,GAAG,SAAAA,CAAA;IAAM,OAAA1B,SAAS,CAACM,MAAM,EAAEJ,IAAI,EAAEc,MAAM,CAAC,CAACW,MAAM,GAAG,CAAC;EAA1C,CAA0C;EAErE,IAAMC,YAAY,GAAG3B,iBAAiB,CAACC,IAAI,CAAC;EAE5C,IAAM2B,aAAa,GAAG,SAAAA,CAACC,KAA4B;IACjD,OAAAxB,MAAM,CAACyB,OAAO,CAAC,UAACZ,KAAK,EAAEa,KAAK;MAC1B,IAAMpB,QAAQ,GAAGqB,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,GAAGA,KAAK,CAACE,KAAK,CAAC,GAAGF,KAAK;MAC5DtB,KAAK,CAAC2B,IAAI,CAAChB,KAAK,EAAET,aAAa,EAAEE,QAAQ,EAAEgB,YAAY,CAAC;IAC1D,CAAC,CAAC;EAHF,CAGE;EAEJ,IAAIR,QAAQ,GAAGR,QAAQ,EAAE;EAEzB,KAAK,IAAIkB,KAAK,GAAGV,QAAQ,EAAEU,KAAK,IAAIlB,QAAQ,EAAEkB,KAAK,EAAE,EAAE;IACrDD,aAAa,CAACC,KAAK,CAAC;IACpB,IAAIJ,YAAY,EAAE,EAAE;EACtB;EAEA,IAAIZ,iBAAiB,EAAE;IACrBe,aAAa,CAACZ,YAAY,CAAC;EAC7B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}