{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\ibs\\\\IBS-adminpage\\\\src\\\\components\\\\posts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, Input, Button } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  TextArea\n} = Input;\nconst PostPage = () => {\n  _s();\n  const [posts, setPosts] = useState(JSON.parse(localStorage.getItem('posts')) || []);\n  const [newPost, setNewPost] = useState({\n    title: '',\n    content: ''\n  });\n\n  // Every time the posts state changes, this effect will run and update localStorage.\n  useEffect(() => {\n    localStorage.setItem('posts', JSON.stringify(posts));\n  }, [posts]);\n\n  // This function will handle the title and content inputs.\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewPost({\n      ...newPost,\n      [name]: value\n    });\n  };\n\n  // This function will be triggered when the 'Add Post' button is clicked.\n  const addPost = () => {\n    if (!newPost.title || !newPost.content) {\n      alert(\"Please fill in both title and content.\");\n      return;\n    }\n    const updatedPosts = [...posts, newPost];\n    setPosts(updatedPosts);\n    setNewPost({\n      title: '',\n      content: ''\n    }); // Reset for next post\n\n    // No need to explicitly call localStorage.setItem here since it will\n    // be called by the effect hook whenever posts array is updated.\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Post Title\",\n        style: {\n          marginBottom: '10px'\n        },\n        value: newPost.title,\n        name: \"title\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n        placeholder: \"Post Content\",\n        rows: 4,\n        style: {\n          marginBottom: '10px'\n        },\n        value: newPost.content,\n        name: \"content\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this),\n        onClick: addPost,\n        children: \"Add Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(Card, {\n        title: post.title,\n        style: {\n          marginBottom: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"hL8WLDvdnIMmuYK3iWDmIYD4a1w=\");\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useState","useEffect","Card","Input","Button","PlusOutlined","jsxDEV","_jsxDEV","TextArea","PostPage","_s","posts","setPosts","JSON","parse","localStorage","getItem","newPost","setNewPost","title","content","setItem","stringify","handleInputChange","e","name","value","target","addPost","alert","updatedPosts","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","marginBottom","onChange","rows","type","icon","onClick","marginTop","map","post","index","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/ibs/IBS-adminpage/src/components/posts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, Input, Button } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst PostPage = () => {\r\n  const [posts, setPosts] = useState(\r\n    JSON.parse(localStorage.getItem('posts')) || []\r\n  );\r\n  const [newPost, setNewPost] = useState({\r\n    title: '',\r\n    content: ''\r\n  });\r\n\r\n  // Every time the posts state changes, this effect will run and update localStorage.\r\n  useEffect(() => {\r\n    localStorage.setItem('posts', JSON.stringify(posts));\r\n  }, [posts]);\r\n\r\n  // This function will handle the title and content inputs.\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewPost({ ...newPost, [name]: value });\r\n  };\r\n\r\n  // This function will be triggered when the 'Add Post' button is clicked.\r\n  const addPost = () => {\r\n    if (!newPost.title || !newPost.content) {\r\n      alert(\"Please fill in both title and content.\");\r\n      return;\r\n    }\r\n    const updatedPosts = [...posts, newPost];\r\n    setPosts(updatedPosts);\r\n    setNewPost({ title: '', content: '' }); // Reset for next post\r\n\r\n    // No need to explicitly call localStorage.setItem here since it will\r\n    // be called by the effect hook whenever posts array is updated.\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <div>\r\n        <h2>Create Post</h2>\r\n        <Input\r\n          placeholder=\"Post Title\"\r\n          style={{ marginBottom: '10px' }}\r\n          value={newPost.title}\r\n          name=\"title\"\r\n          onChange={handleInputChange}\r\n        />\r\n        <TextArea\r\n          placeholder=\"Post Content\"\r\n          rows={4}\r\n          style={{ marginBottom: '10px' }}\r\n          value={newPost.content}\r\n          name=\"content\"\r\n          onChange={handleInputChange}\r\n        />\r\n        <Button \r\n          type=\"primary\" \r\n          icon={<PlusOutlined />} \r\n          onClick={addPost}\r\n        >\r\n          Add Post\r\n        </Button>\r\n      </div>\r\n      <div style={{ marginTop: '20px' }}>\r\n        {posts.map((post, index) => (\r\n          <Card title={post.title} key={index} style={{ marginBottom: '10px' }}>\r\n            <p>{post.content}</p>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n   </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}