{"ast":null,"code":"import call from '../../config/FetchInterceptor';\nimport { notification } from 'antd';\nimport { updateState } from '../reducers';\nconst apiCall = ({\n  dispatch\n}) => next => action => {\n  if (action.type !== 'api/api-call') next(action);else {\n    const {\n      url,\n      method,\n      postData,\n      nextAction,\n      stateName\n    } = action.payload;\n    try {\n      call({\n        url,\n        method,\n        data: postData\n      }).then(data => {\n        if (stateName) dispatch(updateState({\n          [stateName]: data\n        }));\n        if (nextAction !== null && nextAction !== void 0 && nextAction.length) for (let afterAction of nextAction) dispatch(afterAction());\n        if (data.message) notification.success({\n          message: data.message\n        });\n        dispatch(updateState({\n          isModal: false\n        }));\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => dispatch(updateState({\n        isLoading: false\n      })));\n    } catch (err) {\n      console.log(err);\n    }\n  }\n};\nexport default apiCall;","map":{"version":3,"names":["call","notification","updateState","apiCall","dispatch","next","action","type","url","method","postData","nextAction","stateName","payload","data","then","length","afterAction","message","success","isModal","catch","error","console","log","finally","isLoading","err"],"sources":["C:/Users/hp/Desktop/IBS-adminpage/src/redux/middleware/apiCall.js"],"sourcesContent":["import call from '../../config/FetchInterceptor';\r\nimport {notification} from 'antd';\r\nimport {updateState} from '../reducers';\r\n\r\n\r\nconst apiCall = ({dispatch}) => (next) => (action) => {\r\n    if (action.type !== 'api/api-call') next(action); \r\n    else {\r\n        const {url, method, postData, nextAction, stateName} = action.payload;\r\n        try {\r\n            call({url, method, data: postData}).then((data) => {\r\n                if (stateName) dispatch(updateState({[stateName]: data}));\r\n                if (nextAction?.length) for(let afterAction of nextAction) dispatch(afterAction());\r\n                if (data.message) notification.success({message: data.message});\r\n                dispatch(updateState({isModal: false}))\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            }).finally(() => dispatch(updateState({isLoading: false})));\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\n\r\nexport default apiCall;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,+BAA+B;AAChD,SAAQC,YAAY,QAAO,MAAM;AACjC,SAAQC,WAAW,QAAO,aAAa;AAGvC,MAAMC,OAAO,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAMC,IAAI,IAAMC,MAAM,IAAK;EAClD,IAAIA,MAAM,CAACC,IAAI,KAAK,cAAc,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,KAC5C;IACD,MAAM;MAACE,GAAG;MAAEC,MAAM;MAAEC,QAAQ;MAAEC,UAAU;MAAEC;IAAS,CAAC,GAAGN,MAAM,CAACO,OAAO;IACrE,IAAI;MACAb,IAAI,CAAC;QAACQ,GAAG;QAAEC,MAAM;QAAEK,IAAI,EAAEJ;MAAQ,CAAC,CAAC,CAACK,IAAI,CAAED,IAAI,IAAK;QAC/C,IAAIF,SAAS,EAAER,QAAQ,CAACF,WAAW,CAAC;UAAC,CAACU,SAAS,GAAGE;QAAI,CAAC,CAAC,CAAC;QACzD,IAAIH,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEK,MAAM,EAAE,KAAI,IAAIC,WAAW,IAAIN,UAAU,EAAEP,QAAQ,CAACa,WAAW,CAAC,CAAC,CAAC;QAClF,IAAIH,IAAI,CAACI,OAAO,EAAEjB,YAAY,CAACkB,OAAO,CAAC;UAACD,OAAO,EAAEJ,IAAI,CAACI;QAAO,CAAC,CAAC;QAC/Dd,QAAQ,CAACF,WAAW,CAAC;UAACkB,OAAO,EAAE;QAAK,CAAC,CAAC,CAAC;MAC3C,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACtB,CAAC,CAAC,CAACG,OAAO,CAAC,MAAMrB,QAAQ,CAACF,WAAW,CAAC;QAACwB,SAAS,EAAE;MAAK,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC,CAAC,OAAMC,GAAG,EAAE;MACTJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;IACpB;EACJ;AACJ,CAAC;AAED,eAAexB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}